// File: vulnerability_operations.go
package postgres

import (
	"log"

	"github.com/SiriusScan/go-api/sirius/postgres/models"
	"gorm.io/gorm"
)

func AddVulnerability(db *gorm.DB, entry models.CVEData) error {
	result := db.Create(&entry)
	return result.Error
}

// * GetVulnerability accepts a CVE ID and returns the corresponding CVEItem
func GetVulnerability(db *gorm.DB, cveID string) (models.CVEItem, error) {
	var vuln models.CVEItem

	result := db.Preload("DataMeta").
		Preload("ProblemType").
		Preload("ProblemType.ProblemTypeData").
		Preload("ProblemType.ProblemTypeData.Descriptions").
		Preload("References").
		Preload("Descriptions").
		Preload("Configurations").
		Preload("Configurations.Nodes").
		Preload("Configurations.Nodes.CpeMatch").
		Preload("Impact").
		Joins("JOIN cve_data_meta ON cve_data_meta.cve_item_id = cve_items.id").
		Where("cve_data_meta.id = ?", cveID).
		First(&vuln)

	if result.Error != nil {
		return models.CVEItem{}, result.Error
	}
	log.Println("=========")
	log.Println(vuln)
	log.Println("=========")

	return vuln, nil
}
