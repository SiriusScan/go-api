package vulnerability

import (
	"github.com/SiriusScan/go-api/nvd"
	"github.com/SiriusScan/go-api/sirius"
	"github.com/SiriusScan/go-api/sirius/postgres"
	"github.com/SiriusScan/go-api/sirius/postgres/models"
)

//* GetVulnerability accepts a CVE ID and returns the corresponding CVEItem
// This is a wrapper function for the GetVulnerability function in the postgres package

func GetVulnerability(vid string) (nvd.CveItem, error) {

	cve, err := nvd.GetCVE(vid)
	if err != nil {
		return nvd.CveItem{}, err
	}

	return cve, nil

	// db := postgres.GetDB()

	// var dbVuln models.Vulnerability

	// // Retrieve vulnerability from database by vid
	// result := db.Where("v_id = ?", vid).First(&dbVuln)
	// if result.Error != nil {
	// 	return sirius.Vulnerability{}, result.Error
	// }

	// log.Println("Retrieved vulnerability with ID: " + dbVuln.VID)

	// // Map dbVuln to sirius.Vulnerability
	// var vuln sirius.Vulnerability
	// vuln = mapDBModelToSirius(dbVuln)

	// vuln.VID = dbVuln.VID should be a mapping function

	// return vuln, nil
}

func CheckVulnerabilityExists(vid string) bool {
	db := postgres.GetDB()

	var dbVuln models.Vulnerability

	// Check if vulnerability exists in database
	result := db.Where("v_id = ?", vid).First(&dbVuln)
	if result.Error != nil {
		return false
	}

	return true
}

// AddVulnerability Chain: SDK Consumer (e.g. Sirius REST API) -> SDK go-api sirius/vulnerability (Here)
func AddVulnerability(vuln sirius.Vulnerability) error {
	// fmt.Printf("Adding or updating vulnerability %s in database\n", vuln.VID)

	//dbHost := MapSiriusHostToDBHost(vuln)
	db := postgres.GetDB()

	// Map the sirius.Vulnerability to a models.Vulnerability
	var dbVuln models.Vulnerability
	dbVuln = mapSiriusToDBModel(vuln)

	// log.Println("========> AddVulnerability (api) => sirius.Vulnerability")
	// log.Println(vuln)

	result := db.Create(&dbVuln)
	return result.Error
}

func DeleteVulnerability(vid string) error {
	// fmt.Printf("Deleting vulnerability %s from database\n", vid)

	db := postgres.GetDB()

	var dbVuln models.Vulnerability

	result := db.Where("v_id = ?", vid).Delete(&dbVuln)
	return result.Error
}

// =============== Mapping Functions ===============

// Mapping from Database Model to Application Struct
func mapDBModelToSirius(dbVuln models.Vulnerability) sirius.Vulnerability {
	return sirius.Vulnerability{
		VID: dbVuln.VID,
		// Description: mapDescriptionsToSirius(dbVuln.Description),
		Description: dbVuln.Description,
		Title:       dbVuln.Title,
		RiskScore:   dbVuln.RiskScore,
		// RiskScore:   mapRiskScoreToSirius(dbVuln.RiskScore),
	}
}

func mapRiskScoreToSirius(dbRisk models.RiskScore) sirius.RiskScore {
	return sirius.RiskScore{
		CVSSV3: mapBaseMetricV3ToSirius(dbRisk.CVSSV3),
		CVSSV2: mapBaseMetricV2ToSirius(dbRisk.CVSSV2),
	}
}

func mapBaseMetricV3ToSirius(dbMetricV3 models.BaseMetricV3) sirius.BaseMetricV3 {
	return sirius.BaseMetricV3{
		CVSSV3:              dbMetricV3.CVSSV3,
		ExploitabilityScore: dbMetricV3.ExploitabilityScore,
		ImpactScore:         dbMetricV3.ImpactScore,
	}
}

func mapBaseMetricV2ToSirius(dbMetricV2 models.BaseMetricV2) sirius.BaseMetricV2 {
	return sirius.BaseMetricV2{
		CVSSV2:              dbMetricV2.CVSSV2,
		Severity:            dbMetricV2.Severity,
		ExploitabilityScore: dbMetricV2.ExploitabilityScore,
		ImpactScore:         dbMetricV2.ImpactScore,
	}
}

// Mapping from Application Struct to Database Model
func mapSiriusToDBModel(vuln sirius.Vulnerability) models.Vulnerability {
	return models.Vulnerability{
		VID:         vuln.VID,
		Description: vuln.Description,
		// Description: mapDescriptionsToDBModel(vuln.Description),
		Title:     vuln.Title,
		RiskScore: vuln.RiskScore,
		// RiskScore: mapSiriusRiskScoreToDBModel(vuln.RiskScore),
	}
}

func mapSiriusRiskScoreToDBModel(riskScore sirius.RiskScore) models.RiskScore {
	return models.RiskScore{
		CVSSV3: mapSiriusBaseMetricV3ToDBModel(riskScore.CVSSV3),
		CVSSV2: mapSiriusBaseMetricV2ToDBModel(riskScore.CVSSV2),
	}
}

func mapSiriusBaseMetricV3ToDBModel(metricV3 sirius.BaseMetricV3) models.BaseMetricV3 {
	return models.BaseMetricV3{
		CVSSV3:              metricV3.CVSSV3,
		ExploitabilityScore: metricV3.ExploitabilityScore,
		ImpactScore:         metricV3.ImpactScore,
	}
}

func mapSiriusBaseMetricV2ToDBModel(metricV2 sirius.BaseMetricV2) models.BaseMetricV2 {
	return models.BaseMetricV2{
		CVSSV2:              metricV2.CVSSV2,
		Severity:            metricV2.Severity,
		ExploitabilityScore: metricV2.ExploitabilityScore,
		ImpactScore:         metricV2.ImpactScore,
	}
}

// =============== Legacy Code ===============

// * MapCVEItem accepts a models.CVEItem and returns a sirius.Entry
// This function maps the models.CVEItem to a sirius.Entry
func MapCVEItem(dbVuln models.CVEItem) sirius.Entry {
	var siriusEntry sirius.Entry

	// Map the models.CVEItem to a sirius.Entry
	// ! Returns a sirius.Entry
	// siriusEntry.EntryId = ??? => Need to come up with a system for these. May also want to backwards normalize the DB against this setup as opposed to NIST
	siriusEntry.CVE = dbVuln.DataMeta.ID
	siriusEntry.CVEDataFormat = dbVuln.CVEDataFormat
	siriusEntry.CVEDataType = dbVuln.CVEDataType
	siriusEntry.CVEDataVersion = dbVuln.DataVersion
	siriusEntry.CVEDataNumberOfCVEs = "1"
	siriusEntry.CVEDataTimestamp = dbVuln.PublishedDate
	siriusEntry.CVEDataMeta = MapCVEDataMeta(dbVuln.DataMeta)
	siriusEntry.Description.Value = dbVuln.Descriptions[0].Value

	return siriusEntry
}

// * MapCVEDataMeta accepts a models.CVEDataMeta and returns a sirius.CVEDataMeta
// This function maps the models.CVEDataMeta to a sirius.CVEDataMeta
func MapCVEDataMeta(dbVulnMeta models.CVEDataMeta) sirius.CVEDataMeta {
	var siriusEntryMeta sirius.CVEDataMeta

	// Map the models.CVEDataMeta to a sirius.CVEDataMeta
	// ! Returns a sirius.CVEDataMeta
	siriusEntryMeta.ID = dbVulnMeta.ID
	siriusEntryMeta.ASSIGNER = dbVulnMeta.Assigner

	return siriusEntryMeta
}

// * MapDescription accepts a models.Description and returns a sirius.Description
// This function maps the models.Description to a sirius.Description
func MapDescription(dbVulnDescription models.Description) sirius.Description {
	var siriusEntryDescription sirius.Description

	// Map the models.Description to a sirius.Description
	// ! Returns a sirius.Description
	// siriusEntryDescription.Lang = dbVulnDescription.Lang
	siriusEntryDescription.Value = dbVulnDescription.Value

	return siriusEntryDescription
}
